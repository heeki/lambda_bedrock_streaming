AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFront distribution for Lambda with Bedrock response streaming
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    MemorySize: !Ref pFnMemory
    Runtime: python3.11
    Timeout: !Ref pFnTimeout
Parameters:
  pFnMemory:
    Type: Number
  pFnTimeout:
    Type: Number
  pFnArn:
    Type: String
  pFnUrl:
    Type: String
Resources:
  CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Ref AWS::StackName
        DefaultTTL: 3600
        MaxTTL: 3600
        MinTTL: 3600
        Name: 1hour
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: furl
            DomainName: !Select [2, !Split ["/", !Ref pFnUrl]]
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
          CachedMethods: [HEAD, GET]
          CachePolicyId: !Ref CachePolicy
          Compress: true
          LambdaFunctionAssociations:
            - EventType: origin-request
              IncludeBody: true
              LambdaFunctionARN: !Ref EdgeFn.Version
          TargetOriginId: furl
          ViewerProtocolPolicy: redirect-to-https
  FnPerms:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref pFnArn
      FunctionUrlAuthType: AWS_IAM
      Action: lambda:InvokeFunctionUrl
      Principal: cloudfront.amazonaws.com
      SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}'
  EdgeFnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunctionUrl
                Resource: !Ref pFnArn
                Condition:
                  StringEquals:
                    lambda:FunctionUrlAuthType: AWS_IAM
  EdgeFn:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../src/edge
      Handler: fn.handler
      Role: !GetAtt EdgeFnRole.Arn
      Tags:
        application:group: generative-ai
        application:subgroup: bedrock
        application:owner: heeki
Outputs:
  outDistribution:
    Value: !Ref Distribution
  outEdgeFn:
    Value: !Ref EdgeFn
